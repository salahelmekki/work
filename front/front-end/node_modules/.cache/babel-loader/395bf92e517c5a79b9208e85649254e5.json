{"ast":null,"code":"import axios from \"axios\"; // Add a response interceptor\n\naxios.interceptors.response.use(response => response, error => {\n  // Reject promise if usual error\n  if (error.response.status !== 401) {\n    return Promise.reject(error);\n  } // if (localStorage.getItem(\"refresh_token\")) {\n  //   const url = API_HOST + API_REFRESH_TOKEN;\n  //   axios\n  //     .create()\n  //     .post(url, { refresh_token: localStorage.getItem(\"refresh_token\") })\n  //     .then(\n  //       (response) => {\n  //         //get token\n  //         const token = response.data.token;\n  //         localStorage.setItem(\"token\", token);\n  //       },\n  //       (error) => {\n  //         localStorage.clear();\n  //         window.location = \"/login\";\n  //       }\n  //     );\n  // }\n\n\n  return Promise.reject(error);\n}); // Add a request interceptor\n\naxios.interceptors.request.use(function (config) {\n  //get token\n  const token = localStorage.getItem(\"token\"); // Do something before request is sent\n\n  config.headers.Authorization = `Bearer ${token}`;\n  return config;\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n});\nconst axiosService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  patch: axios.patch\n};\nexport default axiosService;","map":{"version":3,"sources":["/home/inspire/work/front/front-end/src/services/axiosServices.js"],"names":["axios","interceptors","response","use","error","status","Promise","reject","request","config","token","localStorage","getItem","headers","Authorization","axiosService","get","post","put","delete","patch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAGA;;AACAA,KAAK,CAACC,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACGD,QAAD,IAAcA,QADhB,EAEGE,KAAD,IAAW;AACT;AACA,MAAIA,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACjC,WAAOC,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,GAJQ,CAKT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CAzBH,E,CA4BA;;AACAJ,KAAK,CAACC,YAAN,CAAmBO,OAAnB,CAA2BL,GAA3B,CACE,UAAUM,MAAV,EAAkB;AAChB;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAFgB,CAGhB;;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAAgC,UAASJ,KAAM,EAA/C;AAEA,SAAOD,MAAP;AACD,CARH,EASE,UAAUL,KAAV,EAAiB;AACf;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CAZH;AAeA,MAAMW,YAAY,GAAG;AACnBC,EAAAA,GAAG,EAAEhB,KAAK,CAACgB,GADQ;AAEnBC,EAAAA,IAAI,EAAEjB,KAAK,CAACiB,IAFO;AAGnBC,EAAAA,GAAG,EAAElB,KAAK,CAACkB,GAHQ;AAInBC,EAAAA,MAAM,EAAEnB,KAAK,CAACmB,MAJK;AAKnBC,EAAAA,KAAK,EAAEpB,KAAK,CAACoB;AALM,CAArB;AAOA,eAAeL,YAAf","sourcesContent":["import axios from \"axios\";\n\n\n// Add a response interceptor\naxios.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Reject promise if usual error\n    if (error.response.status !== 401) {\n      return Promise.reject(error);\n    }\n    // if (localStorage.getItem(\"refresh_token\")) {\n    //   const url = API_HOST + API_REFRESH_TOKEN;\n    //   axios\n    //     .create()\n    //     .post(url, { refresh_token: localStorage.getItem(\"refresh_token\") })\n    //     .then(\n    //       (response) => {\n    //         //get token\n    //         const token = response.data.token;\n    //         localStorage.setItem(\"token\", token);\n    //       },\n    //       (error) => {\n    //         localStorage.clear();\n    //         window.location = \"/login\";\n    //       }\n    //     );\n    // }\n    return Promise.reject(error);\n  }\n);\n\n// Add a request interceptor\naxios.interceptors.request.use(\n  function (config) {\n    //get token\n    const token = localStorage.getItem(\"token\");\n    // Do something before request is sent\n    config.headers.Authorization = `Bearer ${token}`;\n\n    return config;\n  },\n  function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\nconst axiosService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  patch: axios.patch,\n};\nexport default axiosService;\n"]},"metadata":{},"sourceType":"module"}