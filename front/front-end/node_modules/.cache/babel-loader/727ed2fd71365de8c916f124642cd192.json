{"ast":null,"code":"import axios from \"axios\";\nimport { API_HOST, API_REFRESH_TOKEN } from \"../../Api\"; // Add a response interceptor\n\naxios.interceptors.response.use(response => response, error => {\n  // Reject promise if usual error\n  if (error.response.status !== 401) {\n    return Promise.reject(error);\n  }\n\n  if (localStorage.getItem(\"refresh_token\")) {\n    const url = API_HOST + API_REFRESH_TOKEN;\n    axios.create().post(url, {\n      refresh_token: localStorage.getItem(\"refresh_token\")\n    }).then(response => {\n      //get token\n      const token = response.data.token;\n      localStorage.setItem(\"token\", token);\n    }, error => {\n      localStorage.clear();\n      window.location = \"/login\";\n    });\n  }\n\n  return Promise.reject(error);\n}); // Add a request interceptor\n\naxios.interceptors.request.use(function (config) {\n  //get token\n  const token = localStorage.getItem(\"token\"); // Do something before request is sent\n\n  config.headers.Authorization = `Bearer ${token}`;\n  return config;\n}, function (error) {\n  // Do something with request error\n  return Promise.reject(error);\n});\nconst axiosService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  patch: axios.patch\n};\nexport default axiosService;","map":{"version":3,"sources":["/home/inspire/work/front/front-end/src/services/axiosServices.js"],"names":["axios","API_HOST","API_REFRESH_TOKEN","interceptors","response","use","error","status","Promise","reject","localStorage","getItem","url","create","post","refresh_token","then","token","data","setItem","clear","window","location","request","config","headers","Authorization","axiosService","get","put","delete","patch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,iBAAnB,QAA4C,WAA5C,C,CAEA;;AACAF,KAAK,CAACG,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACGD,QAAD,IAAcA,QADhB,EAEGE,KAAD,IAAW;AACT;AACA,MAAIA,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACjC,WAAOC,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD;;AACD,MAAII,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAJ,EAA2C;AACzC,UAAMC,GAAG,GAAGX,QAAQ,GAAGC,iBAAvB;AACAF,IAAAA,KAAK,CACFa,MADH,GAEGC,IAFH,CAEQF,GAFR,EAEa;AAAEG,MAAAA,aAAa,EAAEL,YAAY,CAACC,OAAb,CAAqB,eAArB;AAAjB,KAFb,EAGGK,IAHH,CAIKZ,QAAD,IAAc;AACZ;AACA,YAAMa,KAAK,GAAGb,QAAQ,CAACc,IAAT,CAAcD,KAA5B;AACAP,MAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AACD,KARL,EASKX,KAAD,IAAW;AACTI,MAAAA,YAAY,CAACU,KAAb;AACAC,MAAAA,MAAM,CAACC,QAAP,GAAkB,QAAlB;AACD,KAZL;AAcD;;AACD,SAAOd,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CAzBH,E,CA4BA;;AACAN,KAAK,CAACG,YAAN,CAAmBoB,OAAnB,CAA2BlB,GAA3B,CACE,UAAUmB,MAAV,EAAkB;AAChB;AACA,QAAMP,KAAK,GAAGP,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAFgB,CAGhB;;AACAa,EAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAAgC,UAAST,KAAM,EAA/C;AAEA,SAAOO,MAAP;AACD,CARH,EASE,UAAUlB,KAAV,EAAiB;AACf;AACA,SAAOE,OAAO,CAACC,MAAR,CAAeH,KAAf,CAAP;AACD,CAZH;AAeA,MAAMqB,YAAY,GAAG;AACnBC,EAAAA,GAAG,EAAE5B,KAAK,CAAC4B,GADQ;AAEnBd,EAAAA,IAAI,EAAEd,KAAK,CAACc,IAFO;AAGnBe,EAAAA,GAAG,EAAE7B,KAAK,CAAC6B,GAHQ;AAInBC,EAAAA,MAAM,EAAE9B,KAAK,CAAC8B,MAJK;AAKnBC,EAAAA,KAAK,EAAE/B,KAAK,CAAC+B;AALM,CAArB;AAOA,eAAeJ,YAAf","sourcesContent":["import axios from \"axios\";\nimport { API_HOST, API_REFRESH_TOKEN } from \"../../Api\";\n\n// Add a response interceptor\naxios.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Reject promise if usual error\n    if (error.response.status !== 401) {\n      return Promise.reject(error);\n    }\n    if (localStorage.getItem(\"refresh_token\")) {\n      const url = API_HOST + API_REFRESH_TOKEN;\n      axios\n        .create()\n        .post(url, { refresh_token: localStorage.getItem(\"refresh_token\") })\n        .then(\n          (response) => {\n            //get token\n            const token = response.data.token;\n            localStorage.setItem(\"token\", token);\n          },\n          (error) => {\n            localStorage.clear();\n            window.location = \"/login\";\n          }\n        );\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Add a request interceptor\naxios.interceptors.request.use(\n  function (config) {\n    //get token\n    const token = localStorage.getItem(\"token\");\n    // Do something before request is sent\n    config.headers.Authorization = `Bearer ${token}`;\n\n    return config;\n  },\n  function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\nconst axiosService = {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  patch: axios.patch,\n};\nexport default axiosService;\n"]},"metadata":{},"sourceType":"module"}